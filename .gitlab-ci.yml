stages:
  - build
  - deploy

variables:
  IMAGE_NAME: registry.gitlab.com/mahmoudqotb123/client_dashboard
  SERVICE_NAME: eazifly_production_client_dashboard

# -------- BUILD STAGE --------
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - echo "🔧 Setting up Docker environment..."
    - docker info
  script:
    - echo "🔑 Logging in to GitLab Registry..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY

    - echo "🐳 Building Docker images..."
    - docker build -t $IMAGE_NAME:$CI_COMMIT_SHA .
    - docker build -t $IMAGE_NAME:latest .

    - echo "📤 Pushing images to GitLab Registry..."
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:latest
  only:
    - main

# -------- DEPLOY STAGE --------
deploy:
  stage: deploy
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - apk add --no-cache openssh-client curl
    - echo "🔐 Setting up SSH..."
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
    - ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP "echo 'SSH connection successful!'"

  script:
    - echo "🚀 Deploying image built in this pipeline ($CI_COMMIT_SHA) to Swarm service $SERVICE_NAME..."
    - |
      ssh -i ~/.ssh/id_rsa $SSH_USER@$SERVER_IP "
        set -e

        IMAGE=$IMAGE_NAME:$CI_COMMIT_SHA

        # Login to GitLab registry
        echo \"$CI_REGISTRY_PASSWORD\" | docker login registry.gitlab.com -u \"$CI_REGISTRY_USER\" --password-stdin

        # Pull the commit-specific image
        docker pull \$IMAGE

        # Update or create the Swarm service
        if docker service ls --format '{{.Name}}' | grep -qx '$SERVICE_NAME'; then
            echo 'Updating existing Swarm service: $SERVICE_NAME'
            docker service update --image \$IMAGE $SERVICE_NAME --update-parallelism 1 --update-delay 10s --force
        else
            echo 'Creating new Swarm service: $SERVICE_NAME'
            docker service create --name $SERVICE_NAME --restart-condition any -p 3000 $IMAGE
        fi

        docker service ls
      "
    - echo "🏥 Health check..."
    - sleep 10
    - curl -f http://$SERVER_IP:8080 || echo "⚠️ Health check failed - service might still be starting"

  after_script:
    - echo "🧹 Cleaning up SSH files..."
    - rm -f ~/.ssh/id_rsa ~/.ssh/config 2>/dev/null || true

  only:
    - main

# -------- OPTIONAL ROLLBACK --------
rollback:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
  script:
    - echo "🔄 Rolling back deployment..."
    - |
      ssh -o StrictHostKeyChecking=no $SSH_USER@$SERVER_IP "
        echo '🛑 Stopping current container...'
        docker stop $SERVICE_NAME || true
        docker rm $SERVICE_NAME || true

        echo '📥 Pulling previous image...'
        docker pull $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA || docker pull $IMAGE_NAME:latest

        echo '🚀 Starting rollback container...'
        docker run -d \
          --name $SERVICE_NAME \
          --restart unless-stopped \
          -p 8080:3000 \
          $IMAGE_NAME:$CI_COMMIT_BEFORE_SHA || docker run -d --name $SERVICE_NAME --restart unless-stopped -p 8080:3000 $IMAGE_NAME:latest

        echo '✅ Rollback completed!'
      "
  when: manual
  only:
    - main
